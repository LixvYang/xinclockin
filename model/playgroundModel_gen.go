// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	playgroundFieldNames          = builder.RawFieldNames(&Playground{})
	playgroundRows                = strings.Join(playgroundFieldNames, ",")
	playgroundRowsExpectAutoSet   = strings.Join(stringx.Remove(playgroundFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	playgroundRowsWithPlaceHolder = strings.Join(stringx.Remove(playgroundFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheXinclockinPlaygroundIdPrefix = "cache:xinclockin:playground:id:"
)

type (
	playgroundModel interface {
		Insert(ctx context.Context, data *Playground) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Playground, error)
		Update(ctx context.Context, data *Playground) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPlaygroundModel struct {
		sqlc.CachedConn
		table string
	}

	Playground struct {
		Id        int64        `db:"id"`
		Uid       string       `db:"uid"`
		Content   string       `db:"content"`
		ClockinId int64        `db:"clockin_id"`
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt time.Time    `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
	}
)

func newPlaygroundModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPlaygroundModel {
	return &defaultPlaygroundModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`playground`",
	}
}

func (m *defaultPlaygroundModel) Delete(ctx context.Context, id int64) error {
	xinclockinPlaygroundIdKey := fmt.Sprintf("%s%v", cacheXinclockinPlaygroundIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, xinclockinPlaygroundIdKey)
	return err
}

func (m *defaultPlaygroundModel) FindOne(ctx context.Context, id int64) (*Playground, error) {
	xinclockinPlaygroundIdKey := fmt.Sprintf("%s%v", cacheXinclockinPlaygroundIdPrefix, id)
	var resp Playground
	err := m.QueryRowCtx(ctx, &resp, xinclockinPlaygroundIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", playgroundRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPlaygroundModel) Insert(ctx context.Context, data *Playground) (sql.Result, error) {
	xinclockinPlaygroundIdKey := fmt.Sprintf("%s%v", cacheXinclockinPlaygroundIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, playgroundRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Content, data.ClockinId, data.DeletedAt)
	}, xinclockinPlaygroundIdKey)
	return ret, err
}

func (m *defaultPlaygroundModel) Update(ctx context.Context, data *Playground) error {
	xinclockinPlaygroundIdKey := fmt.Sprintf("%s%v", cacheXinclockinPlaygroundIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, playgroundRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.Content, data.ClockinId, data.DeletedAt, data.Id)
	}, xinclockinPlaygroundIdKey)
	return err
}

func (m *defaultPlaygroundModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheXinclockinPlaygroundIdPrefix, primary)
}

func (m *defaultPlaygroundModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", playgroundRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPlaygroundModel) tableName() string {
	return m.table
}
