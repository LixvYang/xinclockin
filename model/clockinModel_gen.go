// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	clockinFieldNames          = builder.RawFieldNames(&Clockin{})
	clockinRows                = strings.Join(clockinFieldNames, ",")
	clockinRowsExpectAutoSet   = strings.Join(stringx.Remove(clockinFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	clockinRowsWithPlaceHolder = strings.Join(stringx.Remove(clockinFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheXinclockinClockinIdPrefix = "cache:xinclockin:clockin:id:"
)

type (
	clockinModel interface {
		Insert(ctx context.Context, data *Clockin) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Clockin, error)
		Update(ctx context.Context, data *Clockin) error
		Delete(ctx context.Context, id int64) error
	}

	defaultClockinModel struct {
		sqlc.CachedConn
		table string
	}

	Clockin struct {
		Id             int64          `db:"id"`
		Title          string         `db:"title"`
		Description    sql.NullString `db:"description"`
		Cover          sql.NullString `db:"cover"`
		CreatedAt      time.Time      `db:"created_at"`
		UpdatedAt      time.Time      `db:"updated_at"`
		DeletedAt      sql.NullTime   `db:"deleted_at"`
		EndAt          time.Time      `db:"end_at"`
		ClockTimeDaily time.Time      `db:"clock_time_daily"`
	}
)

func newClockinModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultClockinModel {
	return &defaultClockinModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`clockin`",
	}
}

func (m *defaultClockinModel) Delete(ctx context.Context, id int64) error {
	xinclockinClockinIdKey := fmt.Sprintf("%s%v", cacheXinclockinClockinIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, xinclockinClockinIdKey)
	return err
}

func (m *defaultClockinModel) FindOne(ctx context.Context, id int64) (*Clockin, error) {
	xinclockinClockinIdKey := fmt.Sprintf("%s%v", cacheXinclockinClockinIdPrefix, id)
	var resp Clockin
	err := m.QueryRowCtx(ctx, &resp, xinclockinClockinIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", clockinRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClockinModel) Insert(ctx context.Context, data *Clockin) (sql.Result, error) {
	xinclockinClockinIdKey := fmt.Sprintf("%s%v", cacheXinclockinClockinIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, clockinRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Description, data.Cover, data.DeletedAt, data.EndAt, data.ClockTimeDaily)
	}, xinclockinClockinIdKey)
	return ret, err
}

func (m *defaultClockinModel) Update(ctx context.Context, data *Clockin) error {
	xinclockinClockinIdKey := fmt.Sprintf("%s%v", cacheXinclockinClockinIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, clockinRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Description, data.Cover, data.DeletedAt, data.EndAt, data.ClockTimeDaily, data.Id)
	}, xinclockinClockinIdKey)
	return err
}

func (m *defaultClockinModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheXinclockinClockinIdPrefix, primary)
}

func (m *defaultClockinModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", clockinRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultClockinModel) tableName() string {
	return m.table
}
